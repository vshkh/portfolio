const fs = require("fs");
const express = require("express");
const cors = require("cors");
require("dotenv").config();
const axios = require("axios");  // Import axios for manual requests

// Function to get random noun
function getRandomNoun() {
    // Read and split the comma file of nouns (noun list generated by GPT for convenience)
    const data = fs.readFileSync("nouns.csv", "utf8");
    const nouns = data.split(/[\r\n,]+/).map(word => word.trim()).filter(word => word);

    // Generates a random index among the nouns based on its length + random
    return nouns[Math.floor(Math.random() * nouns.length)];
}

// Create Express app
const app = express();

// Middleware
app.use(cors({ origin: ["http://localhost:5173", "http://127.0.0.1:5173"] }));
app.use(express.json()); // Allows JSON request bodies

// Routes
app.get("/", (req, res) => {
    res.json({ mssg: "Welcome to the app" });
});

app.get("/testing", (req, res) => {
    // Choose a random noun for the query
    const randomNoun = getRandomNoun();

    // Make a manual request to Pexels API using axios (since I can't figure out how to use their API)
    axios
        .get("https://api.pexels.com/v1/search", {
            params: {
                query: randomNoun,
                per_page: 1,  
            },
            headers: {
                Authorization: process.env.PEXELS_API_KEY,  
            },
        })
        .then((response) => {
            if (response.data.photos && response.data.photos.length > 0) {
                // If the respose is valid, pull an image source out and return that:
                const imageUrl = response.data.photos[0].src.original;
                res.json({ mssg: randomNoun, imageUrl: imageUrl });
            } else {
                // If something went wrong, state that no image was found.
                res.json({ mssg: randomNoun, imageUrl: "No image found" });
            }
        })
        .catch((err) => {
            console.error(err);
            res.status(500).json({ error: "Something went wrong!" });
        });
});

// Set port and start server
const PORT = process.env.PORT || 4000;
app.listen(PORT, () => {
    console.log(`Listening on Port ${PORT}...`);
});
